const { exec } = require('child_process')
const path = require('path')
const fs = require('fs')
const readline = require('readline')


/*    Function to execute a command and return a Promise    */
const execCommand = (command, options = {}) => { // This function takes a command and optional options as arguments and returns a Promise...
    return new Promise((resolve, reject) => { //...which takes two arguments, resolve and reject...

        console.log(`Executing command: ${command}`) //...and logs the command to the console...

        exec(command, { maxBuffer: 1024 * 1024 * 10, ...options }, (error, stdout, stderr) => { //...then executes the command using the exec function additionally passing options, in which maxBuffer is hardcoded as 1024 * 1024 * 10 and in which cwd as rootDir is included when called from main when answer === '2', and also passing the error, stdout, and stderr to a callback function...

            if (error) { //...wherein if there is an error...

                reject(`Error: ${stderr}`) //...the Promise is rejected with the error message...

            } else { //...otherwise...

                resolve(stdout.split('\n').filter(line => line.trim() !== '')) //...the Promise is resolved with the output of the command
            }
        })
    })
}


/*    Function to find the root directory of the Git repository 8    */
const findGitRootDir = startDir => { // This function takes a startDir as an argument...

    let currentDir = startDir //...and initializes a variable currentDir with the value of startDir...

    while (currentDir !== path.parse(currentDir).root) { //...then enters a while loop that runs as long as currentDir is not the root directory...

        if (fs.existsSync(path.join(currentDir, '.git'))) { //...and checks if the .git directory exists in the current directory...

            return currentDir //...and if it does, returns the current directory...
        }

        currentDir = path.dirname(currentDir) //...otherwise sets the current directory to the parent directory...
    }

    throw new Error('Git root directory not found') //...and throws an error if the root directory is not found
}


/*    Function to process branches in batches    */
const processBranchesInBatches = async (branches, batchSize, processFunc) => { //This function takes branches, batchSize, and processFunc as arguments and returns a Promise...
    for (let i = 0; i < branches.length; i += batchSize) { //...which iterates over the branches array in batches of batchSize, which is set to 10 from its two calls from findRemovedFiles...

        const batch = branches.slice(i, i + batchSize) //...and slices the branches array to get the current batch...

        await processFunc(batch) //...then awaits the processFunc function with the current batch as an argument
    }
}


/*    Function to prompt the user for an action    */ 
const promptUser = () => { // This function returns a Promise...

    return new Promise(resolve => { //...which takes a resolve argument...

        const rl = readline.createInterface({ //...and creates a readline interface...
            input: process.stdin, //...with the input set to process.stdin...
            output: process.stdout //...and the output set to process.stdout
        })

        rl.question('Would you like to:\n (1) see a list of the removed files\n (2) permanently delete all the removed files from the project\'s history\n ', answer => { //...then prompts the user with a question...

            rl.close() ///...and closes the readline interface
            resolve(answer) //...and resolves the Promise with the user's answer
        })
    })
}


/*    Function to escape spaces, brackets, and parentheses in file names    */
const escapeFileName = fileName => { // This function takes a fileName as an argument...
    return fileName.replace(/ /g, '\\ ') //...and returns the fileName with spaces, brackets, and parentheses escaped...
                   .replace(/\[/g, '\\[')
                   .replace(/\]/g, '\\]')
                   .replace(/\(/g, '\\(')
                   .replace(/\)/g, '\\)')
}


/*    Function to find all removed files in the Git repository    */
const findRemovedFiles = async () => { // This function returns a Promise...

    try {
        //...which first finds the root directory of the Git repository...
        const rootDir = findGitRootDir(__dirname) //...by calling the findGitRootDir function with the current directory as an argument...
        console.log(`Git root directory: ${rootDir}`) //...and logging the root directory to the console...

        //...then gets the list of local branches...
        const branchesCommand = `git -C ${rootDir} branch --format="%(refname:short)"` //...by setting the branchesCommand to get the list of local branches...
        const branches = await execCommand(branchesCommand) //...executing the branchesCommand to get the list of local branches...
        console.log(`Local branches: ${branches}`) //...and logging the local branches to the console...

        //...then gets the list of deleted branches from the reflog...
        const reflogBranchesCommand = `git -C ${rootDir} reflog show --all --pretty=format:%gD | grep 'refs/heads/' | sort -u` //...getting the list of branches from the reflog...

        const reflogBranches = await execCommand(reflogBranchesCommand) //...executing the reflogBranchesCommand to get the list of branches from the reflog...

        const allBranches = branches.concat(reflogBranches.map(ref => ref.replace('refs/heads/', '').trim())) //...then concatenating the branches and reflogBranches arrays to get all branches...

        console.log(`All branches (including deleted): ${allBranches}`) //...and logging all branches to the console...

        //...then finds all files ever tracked in the repository...
        let allFiles = new Set() //...by initializing a new Set called allFiles...

        await processBranchesInBatches(allBranches, 10, async batch => { //...then awaiting the processBranchesInBatches function with allBranches, 10, and an async function as arguments...
            
            for (const branch of batch) { //...which iterates over the branches in the current batch...

                const branchName = branch.trim() //...and trims the branch name...

                const allFilesCommand = `git -C ${rootDir} log ${branchName} --name-only --pretty=format: | sort -u` //...then sets the allFilesCommand to get the list of all files ever tracked in the branch...

                const branchFiles = await execCommand(allFilesCommand) //...executes the allFilesCommand to get the list of all files ever tracked in the branch...

                branchFiles.forEach(file => allFiles.add(file)) //...then adds each file to the allFiles Set...
            }

            console.log(`Processed batch of branches: ${batch}`) //...and logs the processed batch of branches to the console...
        })

        console.log(`All files ever tracked: ${Array.from(allFiles)}`) //...and logs all files ever tracked to the console...

        let currentFiles = new Set() //...initializes a new Set called currentFiles...

        //...then finds the list of files in the most recent commit of each branch...
        await processBranchesInBatches(branches, 10, async batch => { //...then awaiting the processBranchesInBatches function again with branches, 10, and an async function as arguments...

            for (const branch of batch) { //...which iterates over the branches in the current batch...

                const branchName = branch.trim() //...and trims the branch name...

                const currentFilesCommand = `git -C ${rootDir} ls-tree -r ${branchName} --name-only` //...then sets the currentFilesCommand to get the list of files in the most recent commit of the branch...

                const branchCurrentFiles = await execCommand(currentFilesCommand) //...executes the currentFilesCommand to get the list of files in the most recent commit of the branch...

                branchCurrentFiles.forEach(file => currentFiles.add(file)) //...then adds each file to the currentFiles Set...
            }

            console.log(`Processed batch of branches for current files: ${batch}`) //...and logs the processed batch of branches for current files to the console...
        })

        console.log(`Current files in the latest commits: ${Array.from(currentFiles)}`) //...and logs the current files in the latest commits to the console...

        //...then finds the files that were once tracked but are no longer present...
        const removedFiles = Array.from(allFiles).filter(file => !currentFiles.has(file)) //...by filtering the allFiles array to get the files that are not in the currentFiles Set...

        console.log(`Removed files: ${removedFiles}`) //...and logging the removed files to the console...

        if (removedFiles.length === 0) { //...then checks if there are no removed files...

            console.log('No removed files found.') //...logs that no removed files were found if none were...
            return //...and returns from the function
        }

        return { rootDir, removedFiles } //...otherwise returns an object with the rootDir and removedFiles

    } catch (error) { //...if an error occurs...

        console.error(error) //...logs the error to the console
    }
}


/*    Function to run the main logic    */
const main = async () => { // This function returns a Promise...

    try { //...which first tries to execute the main logic...

        const answer = await promptUser() //...by awaiting the promptUser function...

        const result = await findRemovedFiles() //...then awaiting the findRemovedFiles function...

        if (!result) { //...and if there is no result
            return //...returns...
        }

        const { rootDir, removedFiles } = result //...otherwise gets the rootDir and removedFiles from the result...

        if (answer === '1') { //...then checks if the user's answer is '1'...

            console.log('Files that were once tracked but are no longer present:') //...and if so logs the removed files to the console...

            removedFiles.forEach(file => console.log(file)) //...by iterating over the removed files and logging each file to the console

        } else if (answer === '2') { //...otherwise checks if the user's answer is '2'...

            const escapedFiles = removedFiles.map(file => escapeFileName(file)) //...and escapes spaces, brackets, and parentheses in the file names...
            
            const deleteCommand = `git filter-branch -f --tree-filter '`
                + escapedFiles.map(file => `git rm -r -f --ignore-unmatch -- "${file}"`).join(' && ')
                + `' -- --all` //...then sets the deleteCommand to delete the removed files from the project's history...

            console.log(`Delete command: ${deleteCommand}`) //...and logs the delete command to the console...

            try { //...then tries to execute the delete command...

                await execCommand(deleteCommand, { cwd: rootDir }) //...by executing the deleteCommand with the rootDir as the current working directory...

                console.log('Removed files have been permanently deleted from the project\'s history.') //...and logs that the removed files have been permanently deleted from the project's history...

                // Cleanup steps
                console.log('Cleaning up reflog and pruning unreachable objects...') //...then logs that the reflog is being cleaned up and unreachable objects are being pruned...

                await execCommand(`git reflog expire --expire=now --all`, { cwd: rootDir }) //...executes the command to expire the reflog...

                await execCommand(`git gc --prune=now --aggressive`, { cwd: rootDir }) //...executes the command to prune unreachable objects...

                await execCommand(`git repack -ad`, { cwd: rootDir }) //...repacks the repository to optimize storage...

                console.log('Cleanup completed.') //...and logs that the cleanup is completed...

            } catch (error) { //...if an error occurs...

                console.error(`Failed to delete removed files: ${error}`) //...logs that the deletion of the removed files failed...
            }

        } else { //...otherwise...

            console.log('Invalid option. Please enter 1 or 2.') //...logs that the user entered an invalid option...
        }

    } catch (error) { //...if an error occurs...

        console.error(error) //...logs the error to the console...
    }
}


main() //The main function is called when the script runs